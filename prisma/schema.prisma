// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  name      String
  avatar    String?
  createdAt DateTime @default(now())

  ideas         Idea[]
  votes         Vote[]
  comments      Comment[]
  activities    UserActivity[]
  webhookConfigs WebhookConfig[]
}

model Idea {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  status      Status   @default(SUBMITTED)
  tags        String[] @default([])
  authorId    String   @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  author      User      @relation(fields: [authorId], references: [id])
  votes       Vote[]
  comments    Comment[]

  @@map("ideas")
}

model Vote {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  userId  String @db.ObjectId
  ideaId  String @db.ObjectId

  user    User   @relation(fields: [userId], references: [id])
  idea    Idea   @relation(fields: [ideaId], references: [id])

  @@unique([userId, ideaId])
  @@map("votes")
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  userId    String   @db.ObjectId
  ideaId    String   @db.ObjectId
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])
  idea      Idea     @relation(fields: [ideaId], references: [id])

  @@map("comments")
}

model UserActivity {
  id           String   @id @default(cuid()) @map("_id")
  userId       String   @db.ObjectId
  activityType String
  targetId     String
  createdAt    DateTime @default(now())
  metadata     Json?

  user         User     @relation(fields: [userId], references: [id])

  @@map("user_activities")
}

model WebhookConfig {
  id          String   @id @default(cuid()) @map("_id")
  userId      String   @db.ObjectId
  service     String   // slack, discord, zapier
  webhookUrl  String
  secretToken String?
  isActive    Boolean  @default(true)
  events      String[] // array of event types to trigger on
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id])

  @@unique([userId, service])
  @@map("webhook_configs")
}

enum Status {
  SUBMITTED
  PLANNED
  IN_PROGRESS
  COMPLETED
  REJECTED
}
